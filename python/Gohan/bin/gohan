#!/usr/bin/env python
# encoding: utf-8
#
# gohan
#
# Created by José Sánchez-Gallego on 22 Apr 2017.


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import

import click
import warnings


@click.group()
def gohan():
    """Performs task related to MaNGa plate design."""
    pass


@gohan.command()
@click.option('-s', '--special', is_flag=True,
              help='if set, only prints a summary table of MaStar special targets. '
                    'This assumes the mangaScience files have already been created.')
@click.option('-x', '--exclude', nargs=1, type=str)
@click.option('-t', '--targetversion', type=str,
              help='the version of the targetting catalogue to use. '
                   'Only for MaNGA lead plateruns. '
                   'If ommitted, the current version will be used.')
@click.option('-d', '--stdpath', type=str,
              help='the path to the standard targets directory.'
                   'Only for MaNGA lead plateruns.')
@click.argument('platerun', type=str)
@click.argument('platedata', type=str)
@click.argument('obs_date', type=str, required=False)
def design(platerun, platedata, special=False, exclude=None,
           targetversion=None, obs_date=None, stdpath=None):
    """Designs a platerun.

    Requieres specifying a PLATERUN and the location of the PLATEDATA file
    that contains the list of plates to run.

    """

    from Gohan.scripts.generate_designs import generate_designs

    generate_designs(platerun, platedata, special=special,
                     exclude=[exclude] if exclude is not None else [],
                     target_version=targetversion, obs_date=obs_date,
                     std_path=stdpath)


@gohan.command()
@click.option('-a', '--all', type=click.Choice(['manga', 'mastar']),
              help='runs postdesign for all plateruns.')
@click.option('-w', '--overwrite', is_flag=True, help='overwrites existing values.')
@click.option('--skip-plateHolesSorted', is_flag=True,
              help='does not copy plateHolesSorted to mangacore.')
@click.argument('plateruns', nargs=-1, metavar='PLATERUN(s)', required=False)
def postdesign(plateruns, all=None, overwrite=False, skip_plateholessorted=False):
    """Runs MaNGA postdesign for a series of plateruns. For now it assumes APOGEE-lead."""

    from Gohan import log
    from Gohan.scripts import post_design
    from Gohan.utils import utils

    if len(plateruns) == 0 and all is None:
        raise click.exceptions.UsageError('bad combination of parameters. '
                                          'Specify a platerun or --all.')

    if all == 'mastar':
        plateruns = utils.getStellarLibraryRuns()
    elif all == 'manga':
        plateruns = utils.getAllMaNGAPlateRuns()

    for platerun in plateruns:
        log.important('Running postdesign for platerun {0}'.format(platerun))
        plates = list(map(int, utils.getFromPlatePlans(platerun, column='plateid')))

        if utils.platerun_is_mastar(platerun):
            post_design.post_design_apogee_led(plates, overwrite=overwrite)
        else:
            post_design.post_design_manga_led(plates, overwrite=overwrite,
                                              skipPlateHolesSorted=skip_plateholessorted)


@gohan.group()
def cmm():
    """Handles CMM files."""
    pass


@cmm.command()
@click.argument('PATH', type=str)
@click.option('--remote', is_flag=True, help='uses the tunnel connection to the DB')
def load(path, remote):
    """Checks PATH and loads CMM files to the DB. PATH can be a directory,
    that will be checked recursively for files not already loaded, or the
    path for a single CMM file.

    """

    from Gohan.exceptions import GohanUserWarning
    from Gohan.scripts.update_cmm import update_cmm

    if remote:
        warnings.warn('using tunnel connection to apodb. Did you create the tunnel?',
                      GohanUserWarning)

    update_cmm(path, remote=remote)


if __name__ == '__main__':
    gohan()
