#!/usr/bin/env python
# encoding: utf-8
#
# gohan
#
# Created by José Sánchez-Gallego on 22 Apr 2017.


from __future__ import division
from __future__ import print_function
from __future__ import absolute_import

import click
import warnings

from Gohan.exceptions import GohanUserWarning
from Gohan.scripts.create_starplate_targets import create_starplate_targets
from Gohan.utils import getStellarLibraryRuns, getFromPlatePlans


@click.group()
def gohan():
    """Performs task related to MaNGa plate design."""
    pass


@gohan.command()
@click.option('-s', '--special', is_flag=True,
              help='if set, only prints a summary table of MaStar special targets. '
                    'This assumes the mangaScience files have already been created.')
@click.argument('platerun', type=str)
@click.argument('platedata', type=str)
def design(platerun, platedata, special=False):
    """Designs a platerun.

    Requieres specifying a PLATERUN and the location of the PLATEDATA file
    that contains the list of plates to run.

    """

    from Gohan.scripts.generate_designs import generate_designs

    generate_designs(platerun, platedata, special=special)


@gohan.command()
@click.option('-a', '--all', is_flag=True, help='runs postdesign for all plateruns.')
@click.option('-w', '--overwrite', is_flag=True, help='overwrites existing values.')
@click.argument('plateruns', nargs=-1, metavar='PLATERUN(s)', required=False)
def postdesign(plateruns, all=False, overwrite=False):
    """Runs MaNGA postdesign for a series of plateruns. For now it assumes APOGEE-lead."""

    if all is True:
        plateruns = getStellarLibraryRuns()

    plates = []
    for platerun in plateruns:
        plates += list(map(int, getFromPlatePlans(platerun, column='plateid')))

    create_starplate_targets(plates, overwrite=overwrite)


@gohan.group()
def cmm():
    """Handles CMM files."""
    pass


@cmm.command()
@click.argument('PATH', type=str)
@click.option('--remote', is_flag=True, help='uses the tunnel connection to the DB')
def load(path, remote):
    """Checks PATH and loads CMM files to the DB. PATH can be a directory,
    that will be checked recursively for files not already loaded, or the
    path for a single CMM file.

    """

    from Gohan.scripts.update_cmm import update_cmm

    if remote:
        warnings.warn('using tunnel connection to apodb. Did you create the tunnel?',
                      GohanUserWarning)

    update_cmm(path, remote=remote)


if __name__ == '__main__':
    gohan()
